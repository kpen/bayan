=Спецификация=
самый черновиковый из всех черновиков
видео бы, кстати, было бы идеальным представлением нижележащего потока мыслей, но не умею, пичалька.


=Версия=
Максимальный вариант


=Термины=
root doc  -  корневой документ, который мы открываем в самом начале
parent doc - документ левее
child doc - документ правее




=Типы ссылок:=
-на часть в корневом документе (root doc)
-на часть в другом документе
-на другой документ типов
	-.txt
	-.bayan
	-music
	-video
	-map (по нажатию открывается карта google, yandex, либо garmin, либо народная карта определённой зоны 
		или прямо с отмеченными координатами, либо с треком)
	-image
	-установочный пакет deb, rpm или msi
	-исполняемый файл. Иные программы можно разрабатывать и так, чтобы они удобно открывались в правом окне
	-sh-скрипт, который можно тут же исполнить в открывающей в правом окне консоли, 
	    то есть имеем встроенный в нашу 		штуковину эмулятор bash
	- веб-страница из интернетов (с параноидальным запросом - разрешаете ли догрузку контента из сети?) 
	- ftp-браузер
	- telnet или ssh соединение в консоли (отличная штука для админов!)
	- flash (во флеше могут быть, к примеру, всяческие штуки 
	- pdf






=Всякое=
Установка тем для отображения текста
Я вот, например, люблю светлый (зелёный) текст на тёмном фоне, но таких ретроградов немного, я так понимаю. Кому-то, вот, подавай розовый на светло-зелёном. Или тёмно-коричневый на бежевом.

Окна всяких программ можно встраивать прямо в страницу bayan, подобно тому, как в интернет-страницы встраивают видео.

Пролистывание по экрану вправо-влево, ибо особо вложенные документы не будут влезать даже в многадюймов. 



=Аппаратное обеспечение=
PC <Linux - priority, Windows,>  Android, в перспективе можно поддержать ubuntu for phones или как там её. 
С ней что хорошо - обещается, что в ней будут работать все приложения из нормальной убунты. 



=Сценарий использования=
вот, к примеру, мануал, как установить vsftp на debian и настроить его.
корневой документ - общие инструкции
из него ссылки на документ с детализированными инструкциями
из него ссылки на примеры кода
из него ссылки на deb-пакет или консолину, в которой исполняется скрипт sudo  (для убунтоидов)  apt-get install  vsftpd
и прочие полезные штуки. 



=Вариант реализации=

И родительское окно и подчиненные окна - все окна - это экземпляры одной и той же программы.
Рассмотрим простейший пример - только два окна - родительсое и подчиненное.

Два окна - два раза запускаем программу.
При запуске "родительского окна"


--Выходит три подхода  к многооконности: 
1. MDI AREA 
Самое простое решение. Все дочерние окна находятся в одном родительском окне. 
   Программа запускается единственный раз и переход по ссылке лишь открывает дочернее окно в MDI AREA
2. Многооконное приложение 
Ещё проще даже, так как можно лишь один раз определить тип окна 
   и далее создавать окна по мере необходимости. Одна программа запускается единственный раз, 
   но может породить сколько угодно равноправных окон (или же неравноправных - 
   тогда при закрытии родительского закроются и все потомки).
3. Многопрограммное приложение
Каждое окно является отдельной программой, отдельным процессом в системе. 
   У программы есть сетевое соединение с родителем (родителями) и потомком (потомками) 

Предлагаю поступить как-то вот так: 
 определить одно окно, 
  могущее быть вызванным самостоятельно, 
    либо другим таким же окном.
    
Каждое окно по своему определению может быть 
  либо предком, 
   либо потомком. 
   
Но с точки зрения системы 
  окно с вызванными потомками будет одним процессом.

В то же время, если пользователь хочет, 
  он может запустить программу 
    и вызывать в её настройках: подключиться к родителю. 
     (данное действие может быть автоматизировано скриптом, 
       с тем, чтобы на каждом подчинённом компьютере запускалось по баяну 
        и подключалось к родительскому - создаётся топология "Звезда", 
          либо последовательно и подключались бы друг к другу - создаётся топология "Кольцо"). 
           В этом случае баян-потомок копирует родителя, полностью повторяя его действия. 

Топология "звезда" хороша для админского примера, 
  который я говорил с утра, либо, скажем, для школьного класса или студенческой лаборатории. 
    (все видят, что пишет учитель)
Топология "Кольцо" хорошо для обсуждения программного продукта - все видят, 
   что открыл или написал каждый участник совещания 
     (здесь желательно припилить систему контроля версий и прочее и прочее). 



============ПОТОК=СОЗНАНИЯ============
Важный момен - а как хранить, собственно, файлы? 
Примитивный вариант 
 - когда все файлы, потребные одному баяну, 
   хранятся в одной папке (архиве). 
      Соответственно, ссылаться на них проще всего. 
       Можно определить особую папку на компьютере (/opt/bayan), 
       где будут храниться файлы по умолчанию, 
            то есть, если документ сослался на файл, и такого нет в папке с файлом, 
            то мы начинаем его сперва искать в юзерской папке (/home/user/.bayan/), 
            потом глобальной папке (/opt/bayan), 
            и если неудачка нас постигла, то вывести ошибку. 
В глобальной папке сохраним, помимо прочего, 
баянопредставления консоли и прочих софтин для отображения контента в документах.
Баян может ссылаться на HTTP сервер или FTP сервер, и даже с авторизацией. 

То есть, если надо, чтоб мог загрузить  данные. 
При загрузке с сервера, где надо авторизовываться, 
пусть вылазит окно ввода имени и пароля. 

Если эти данные закатать в конфиг-файл, что хранится у юзера в папке .bayan, 
то пусть не вылазит. 
 







